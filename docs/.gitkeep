# 🏗 Giải thích Kiến trúc Dự Án

## 1) Solution & Root

**Monopoly.sln**  
File solution chính, liệt kê tất cả project con (Domain, Application, Infrastructure.Json, UI.Unity, các test projects).  
Là entrypoint cho lệnh `dotnet build`, `dotnet test`, CI/CD.

**README.md**  
Tài liệu giới thiệu, hướng dẫn build/test/run và roadmap.

**TEST_PLAN.md**  
Tài liệu định nghĩa các mốc (0→6) & checklist test/DoD.

---

## 2) `src/` (Code production)

### 📂 Monopoly.Domain  
📌 **Chứa toàn bộ luật và state core của Monopoly** – UI và Application không được chứa luật.

- **Core/**
  - `Player.cs` – Class người chơi, giữ thông tin tiền, vị trí, hành động di chuyển.
  - `Board.cs` – Đại diện bàn cờ, kích thước, có thể chứa danh sách ô.
  - `Dice.cs` – Interface + implement xúc xắc (trả về 2 giá trị, tổng, isDouble).
  - `GameContext.cs` – Trạng thái ván chơi (players, turn index, deck) → dùng để serialize/restore.
  - `TurnManager.cs` – Service điều khiển lượt chơi (roll, advance, raise event).

- **Events/**
  - `IDomainEvent`, `PlayerMoved`, … – Định nghĩa sự kiện phát sinh trong domain.
  - `DomainEventBus` – Bộ nhớ tạm chứa event; giúp test có thể đọc ra các event vừa raise.

- **Abstractions/**
  - `Tile.cs` – Abstract base class cho mọi loại ô (Go, Property, Jail,…).
  - `Card.cs` – Abstract base class cho thẻ Chance/CommunityChest.

- **Factory/**
  - `TileFactory.cs` – Đọc cấu hình từ JSON, sinh danh sách Tile tương ứng.

- **Strategy/**
  - `IRentStrategy.cs` – Interface để tính tiền thuê (Property/Railroad/Utility sẽ implement).

- **State/**
  - `IPlayerState` & các class `NormalState`, `InJailState`, `BankruptState`.

> **Tóm lại:** `Monopoly.Domain` là nơi duy nhất chứa business rules của game.

---

### 📂 Monopoly.Application  
📌 **Chứa UseCases + Ports** – trung gian giữa UI và Domain.

- **Ports/**
  - `IGameRepository` – Cách lưu/khôi phục state game (Memory/JSON/DB).
  - `IUiEventBus` – Đẩy thông báo từ Application → UI.

- **DTO/**
  - `PlayerVM`, `BoardVM`, `TileVM`, `ToastVM` – View Models để map domain → UI.

- **Mappers/**
  - `DomainToVm.cs` – Hàm mở rộng để map `Player → PlayerVM`.

- **UseCases/**
  - `NewGameUseCase` – Khởi tạo ván mới, tạo player list, lưu snapshot.
  - `RollDiceUseCase` – Xử lý “Roll” (mốc 1 sẽ triển khai).
  - `EndTurnUseCase` – Kết thúc lượt.

> **Tóm lại:** Application điều phối flow (use case), không chứa logic Monopoly.

---

### 📂 Monopoly.Infrastructure.Json  
📌 **Triển khai `IGameRepository` với JSON** (mốc 5 sẽ dùng).

- **Config/**
  - `BoardConfig.cs` – Model để deserialize file cấu hình bàn.

- **Serialization/**
  - `JsonSettings.cs` – Thiết lập `JsonSerializerOptions`.

- **Repositories/**
  - `JsonGameRepository.cs` – Hiện tại là in-memory; mốc 5 sẽ ghi/đọc JSON thật.

---

### 📂 Monopoly.UI.Unity  
📌 **Code UI** – nơi thực thi trên Unity (hoặc WebGL).

- **Scripts/Bootstrap/**
  - `AppBootstrap.cs` – Khởi tạo game khi app start (gọi `NewGameUseCase`).

- **Scripts/Controllers/**
  - `GameController.cs` – Lắng nghe sự kiện UI (nhấn Roll) → gọi UseCase.

- **Scripts/Mapping/**
  - `UiEventBus.cs` – Triển khai `IUiEventBus`, phát event lên UI (animation/toast).

> **Lưu ý:** UI chỉ hiển thị và gửi input, không chứa luật.

---

## 3) `tests/` (Unit + Integration)

- **Monopoly.Domain.Tests/**
  - `TurnManagerTests.cs` – Test di chuyển player, raise event PlayerMoved.
  - Có thể bổ sung test cho `Player`, `Dice`, `EventBus`.

- **Monopoly.Application.Tests/**
  - (sẽ tạo) test UseCase như `NewGameUseCase`, `RollDiceUseCase`.

- **Monopoly.Integration.Tests/**
  - (sẽ tạo) test end-to-end flow (roll, land property, trả tiền,…).

---

## 4) CI/CD

- **.github/workflows/ci.yml** – Workflow build/test chạy trên GitHub Actions.

---

## 🎯 Ý nghĩa tổng thể

- **Domain:** chứa *what the game is* (luật & state).  
- **Application:** chứa *what happens when user does X* (use case).  
- **UI:** chứa *how user sees and interacts*.  
- **Infrastructure:** chứa *how to persist & load data*.  
- **Tests:** đảm bảo mọi thay đổi domain có test, CI xanh trước khi merge.
